# Download the base map of UK and surrounding countries
uk_map <- ne_countries(
scale = "medium",
returnclass = "sf"
) %>%
filter(admin %in% c("United Kingdom", "Ireland",
"Jersey","France","Netherlands","Germany",
"Denmark","Belgium","Norway","Finland","Sweden"))
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
# Set graphical parameters for the maps
op = par(mfrow=c(2,4), font.lab = 2,
mar=c(2,2.5,1,0.1)+0.1,
oma=c(0.01,0.01,2,0.01),xpd=FALSE)
###### Get NBN Atlas data and map the records ######
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
for (a in 1:length(indicatorSpp)) {
# Split species name into genus and species to parse the API for NBN Atlas
df = getNBNData(indicatorSpp[a],100)
############### Map the records from NBN Atlas ##################
# Projection/CRS of base map, NBN Atlas coordinates:
#     - WGS 84
plot(st_geometry(uk_map),border="#f9fdf9",axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5),
col="#d8dedd",cex.axis=0.8)
if(z==1) {
pointsCol = "#78C6C0"
mainTitle = "Nitrogen-sensitive Lichen"
} else {
pointsCol = "#c6787e"
mainTitle = "Nitrogen-tolerant Lichen"
}
points(as.numeric(df$decimalLongitude),
as.numeric(df$decimalLatitude),
pch = 19,
cex = 0.6,
col=pointsCol)
title(main = indicatorSpp[a],cex.main = 0.9,line = -1)
mtext(mainTitle,
side = 3, line = -0.14, outer = TRUE,col = c("#131713"),
font = 2,cex = 1.05)
################ kernel density map #################################
# Create colour ramp for kernel density estimation of observations
# using The Rock Pool Project brand colours
fun_colour_range <- colorRampPalette(c("#d8dedd",pointsCol))
my_colours <- fun_colour_range(1000)
# Setting up the layers to map
sdf = data.frame(as.numeric(df$decimalLongitude),
as.numeric(df$decimalLatitude))
s = SpatialPoints(na.omit(sdf))
kde.output <- kernelUD(s,h="href", grid = 1000)
# converts to raster
kde <- raster(kde.output)
# sets projection to British National Grid
projection(kde) <- CRS("+init=EPSG:27700")
masked_kde <- mask(kde, uk_map)
plot(masked_kde,col=my_colours,axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5))
plot(st_geometry(uk_map),add = TRUE,border="#f9fdf9")
title(main = indicatorSpp[a],cex.main = 0.9,line = -1)
rm(df)
}
}
nTolerant
1e5
1e5*1
1e5*2
isTRUE(1e5 == 100000)
isTRUE(1e3 == 1000)
isTRUE(1e3 == 10000)
a = 1e3
a
b = 10000000000
a = 1e10
object.size(a)
object.size(b)
b
b-10000
b/10000
b/100000
b/10000000
for (a in 1:5) {]}
for (a in 1:5) {
print(a)
while (a>1) {
print("bananas")
}
}
a = c(1,3,4,5)
a
a+1
a-1
b = c(2,6,7,8)
b
a
a+b
rbind(a,b)
cbind(a,b)
tempdir()
dir.create(tempdir())
knitr::opts_chunk$set(echo = FALSE)
# library(devtools)
# devtools::install_github("RGreensmith/NBNAtlasMappingPack")
# library(NBNAtlasMappingPack)
library(dplyr)
library(sf)
library(rnaturalearth)
library(httr)      # for getting data using API's
library(jsonlite)  # for getting NBN Atlas data
# kernel density map
library(sp) # for setting up the layers to map
library(adehabitatHR)
library(raster)
library(showtext)
# library(ggtext)
# Fonts for plots
font_add_google("Montserrat", "mont")
font_add_google("Chivo", "chivo")
showtext_auto()
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e2
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = rbind(df,getNBNData(indicator[a],numRecords))
}
print(length(df[,1]))
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e2
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = rbind(df,getNBNData(indicator[a],numRecords))
print(z)
print(length(df[,1]))
}
}
###### Get NBN Atlas data ######
# NBN Atlas record filter:
#     - No unconfirmed, unconfirmed (not reviewed) or unconfirmed (plausible)
#     - No absences
getNBNData = function(latinName,numRecords){
# Split species name into genus and species to parse the API for NBN Atlas
binomNmSplit = strsplit(latinName,"[ ]")
genus = binomNmSplit[[1]][1]
species = binomNmSplit[[1]][2]
if (species != "sp.") {
api=paste("https://records-ws.nbnatlas.org/occurrences/search?",
"q=*:*&fq=genus:",
genus,
"&fq=-(identification_verification_status%3A%22Unconfirmed%22%20OR",
"%20identification_verification_status%3A%22Unconfirmed%20-%20",
"not%20reviewed%22%20OR%20identification_verification_status%3A%22",
"Unconfirmed%20-%20plausible%22)&fq=-occurrence_status%3A%22absent",
"%22&fq=taxon_name%3A%22",
genus,
"%20",
species,
"%22&pageSize=",numRecords,sep = "")
} else {
api=paste("https://records-ws.nbnatlas.org/occurrences/search?",
"q=*:*&fq=genus:",
genus,
"&fq=-(identification_verification_status%3A%22Unconfirmed%22%20OR",
"%20identification_verification_status%3A%22Unconfirmed%20-%20",
"not%20reviewed%22%20OR%20identification_verification_status%3A%22",
"Unconfirmed%20-%20plausible%22)&fq=-occurrence_status%3A%22absent",
"%22&fq=taxon_name%3A%22",
genus,
"%22&pageSize=",numRecords,sep = "")
}
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
df=taxonInfoContentJSON$occurrences
return(df)
}
occurrenceMap = function(basemap,sppDF,sppName,colGroup = "a",kdePlot = FALSE) {
# Projection/CRS of base map, NBN Atlas coordinates:
#     - WGS 84
plot(st_geometry(basemap),border="#f9fdf9",axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5),
col="#d8dedd",cex.axis=0.8)
if(colGroup=="a") {
pointsCol = "#78C6C0"
} else {
pointsCol = "#c6787e"
}
points(as.numeric(sppDF$decimalLongitude),
as.numeric(sppDF$decimalLatitude),
pch = 19,
cex = 0.6,
col=pointsCol)
title(main = sppName,cex.main = 0.9,line = -1)
################ kernel density map #################################
if (isTRUE(kdePlot)) {
# Create colour ramp for kernel density estimation of observations
# using my website colours
fun_colour_range <- colorRampPalette(c("#d8dedd",pointsCol))
my_colours <- fun_colour_range(1000)
# Setting up the layers to map
sdf = data.frame(as.numeric(df$decimalLongitude),
as.numeric(df$decimalLatitude))
s = SpatialPoints(na.omit(sdf))
kde.output <- kernelUD(s,h="href", grid = 1000)
# converts to raster
kde <- raster(kde.output)
# sets projection to British National Grid
projection(kde) <- CRS("+init=EPSG:27700")
masked_kde <- mask(kde, uk_map)
plot(masked_kde,col=my_colours,axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5))
plot(st_geometry(uk_map),add = TRUE,border="#f9fdf9")
title(main = indicatorSpp[a],cex.main = 0.9,line = -1)
}
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e2
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = rbind(df,getNBNData(indicator[a],numRecords))
print(z)
print(length(df[,1]))
}
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e2
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = rbind(df,getNBNData(indicatorSpp[a],numRecords))
print(z)
print(length(df[,1]))
}
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e2
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = getNBNData(indicatorSpp[a],numRecords)
print(z)
print(length(df))
print(length(df[,1]))
}
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
} else {
indicatorSpp = nTolerant
}
numRecords = 1e1
df = getNBNData(indicatorSpp[1],numRecords)
for (a in 2:length(indicatorSpp)) {
df = getNBNData(indicatorSpp[a],numRecords)
print(z)
print(length(df))
print(length(df[,1]))
}
}
head(getNBNData(indicatorSpp[1],numRecords))
rep(NA, times = 2)
indSppType = "nSensitive"
indSppType
rep(indSppType, times = 2)
b = 10
rep(indSppType, times = b)
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e1
for (a in 1:length(indicatorSpp)) {
df = getNBNData(indicatorSpp[a],numRecords)
if (a == 1) {
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df2 = rbind(df2,data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
}
View(df2)
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e1
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
}
8+9
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e1
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
}
View(df2)
df2 = na.omit(df2)
View(df2)
plot(df2$df.decimalLongitude~df2$df.decimalLatitude)
points(df2$df.decimalLongitude~df2$df.decimalLatitude, col = "blue")
plot(df2$df.decimalLongitude,df2$df.decimalLatitude)
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e5
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
df2 = na.omit(df2)
}
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e4
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
df2 = na.omit(df2)
}
plot(df2$df.decimalLongitude,df2$df.decimalLatitude)
plot(st_geometry(basemap),border="#f9fdf9",axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5),
col="#d8dedd",cex.axis=0.8)
head(df2)
indicatorSensitive = TRUE
isTRUE(indicatorSensitive)
