library(httr)
library(jsonlite)
url <- "http://api.openweathermap.org/data/2.5/weather"
api_key <- "Enter API KEY"
city <- "New Delhi"
country <- "IN"
params <- list(q = paste(city,country,sep =",") , appid=api_key)
res <- GET(url,query=params)
ans <- fromJSON(content(res,"text"),flatten=TRUE)
tem <- ans$main$temp - 273.15
print(paste("The temperature is", round(tem,2), "C in", city))
tem
install.packages("httr2")
library(httr2)
req <- request(example_url())
?GET
# ==============================================================================
#            SESSION ONE: DOWNLOADING AND FILTERING iNaturalist DATA
# ==============================================================================
# Load Required Packages
library(rinat)
library(httr)
library(lubridate)
# ------------------------------------------------------------------------------
#                      Download Data from the iNaturalist Project
# ------------------------------------------------------------------------------
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
cat("Last update:", as.character(last_update), "\n")
# ------------------------------------------------------------------------------
#                     Adding World Register of Marine Species Data
# ------------------------------------------------------------------------------
library(jsonlite)
library(dplyr)
# ------------------------------------------------------------------------------
#        Add and fill columns for Order and Family to iNaturalist dataframe
# ------------------------------------------------------------------------------
# Create new empty columns to merge with inat_data for taxonomy data
taxon.kingdom = rep(NA, times = length(inat_data[,1]))
taxon.phylum = rep(NA, times = length(inat_data[,1]))
taxon.class = rep(NA, times = length(inat_data[,1]))
taxon.order = rep(NA, times = length(inat_data[,1]))
taxon.family = rep(NA, times = length(inat_data[,1]))
marine = rep(NA, times = length(inat_data[,1]))
brackish = rep(NA, times = length(inat_data[,1]))
freshwater = rep(NA, times = length(inat_data[,1]))
terrestrial = rep(NA, times = length(inat_data[,1]))
# Merge the inat_data dataframe with the new taxon columns
inat_data = cbind(inat_data,
taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
# clean up the global environment
rm(taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
# filling in new inat_data columns with taxonomic information from WoRMS
l = length(inat_data[,1])
for (a in 1:l) {
if (is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"){
binomClassNm = inat_data$taxon.name[a]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
if(object.size(taxonInfoContent)>112) {
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
if(is.na(taxonInfoContentJSON$isMarine[1])==FALSE) {
inat_data$marine[a] = taxonInfoContentJSON$isMarine[1]
}
if(is.na(taxonInfoContentJSON$isBrackish[1])==FALSE) {
inat_data$brackish[a] = taxonInfoContentJSON$isBrackish[1]
}
if(is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE) {
inat_data$freshwater[a] = taxonInfoContentJSON$isFreshwater[1]
}
if(is.na(taxonInfoContentJSON$isTerrestrial[1])==FALSE) {
inat_data$terrestrial[a] = taxonInfoContentJSON$isTerrestrial[1]
}
} else {
inat_data$taxon.kingdom[a] = "taxon info not retrieved"
}
}
}
# ------------------------------------------------------------------------------
#                             Step 1: Map of Anemones
# ------------------------------------------------------------------------------
library(leaflet)
library(scales)
################################################################################
inat_data_filtered = inat_data
inat_data_filtered = filter(inat_data_filtered,marine == 1 | brackish == 1)
354/2
getwd()
setwd("C:/Users/Rose/lichen_mapping")
getwd()
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 8,
fig.height = 5)
library(dplyr)
library(sf)
library(rnaturalearth)
library(httr)      # for getting data using API's
library(jsonlite)  # for getting NBN Atlas data
# kernel density map
library(sp) # for setting up the layers to map
library(adehabitatHR)
library(raster)
source("getNBNData.R")
source("occurrenceMap.R")
library(showtext)
# library(ggtext)
# Fonts for plots
# font_add_google("Montserrat", "mont")
# font_add_google("Chivo", "chivo")
font_add_google("Lilita One", "lil")
showtext_auto()
# Download the base map of UK and surrounding countries --------------------
# CRS is WGS 84
uk_map <- ne_countries(
scale = "medium",
returnclass = "sf"
) %>%
filter(admin %in% c("United Kingdom","Ireland"))
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e4
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
df2 = na.omit(df2)
}
# String of species names to loop through
# "Pseudevernia furfuracea" - need to add to nSensitive
nSensitive = c("Evernia prunastri","Usnea sp.",
"Bryoria sp.","Sphaerophorus globosus","Hypogymnia sp.",
"Parmelia sp.","Graphis sp.","Ochrolechia androgyna")
# "Punctelia subrudecta" - nTolerant
nTolerant = c("Xanthoria parietina","Xanthoria polycarpa","Xanthoria ucrainica",
"Physcia adscendens","Physcia tenella",
"Arthonia radiata","Lecidella elaeochroma","Amandinea punctata",
"Candelariella reflexa")
indicatorSpp = cbind(nSensitive,nTolerant)
names(indicatorSpp) = c("N Sensitive", "N Tolerant")
indicatorSpp[length(nSensitive)+1,1] = "-"
knitr::kable(indicatorSpp, caption = "Nitrogen Indicator Species")
for (z in 1:2) {
if (z == 1){
indicatorSpp = nSensitive
indSppType = "nSensitive"
} else {
indicatorSpp = nTolerant
indSppType = "nTolerant"
}
numRecords = 1e4
for (a in 1:length(indicatorSpp)) {
if (z == 1 && a == 1) {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = data.frame(df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
} else {
df = getNBNData(indicatorSpp[a],numRecords)
df2 = rbind(df2,data.frame(
df$scientificName,
df$decimalLongitude,
df$decimalLatitude,
rep(indSppType, times = length(df[,1]))
)
)
}
}
df2 = na.omit(df2)
}
colnames(df2) = c("scientificName", "decimalLongitude", "decimalLatitude", "indicatorType")
# Preparing data ----------------------------------------------------------
sdf = data.frame(df2$indicatorType,as.numeric(df2$decimalLongitude),
as.numeric(df2$decimalLatitude))
s = SpatialPointsDataFrame(data = na.omit(sdf),coords = sdf[,2:3],proj4string = CRS("EPSG:4326"))
# Calculating kernel density ----------------------------------------------
(ud <- kernelUD(s[,1], same4all = TRUE, grid = 100))
# Calculating difference --------------------------------------------------
udSensitive = raster(ud$nSensitive)
udTolerant = raster(ud$nTolerant)
compareRaster(udSensitive,udTolerant)
rastDiff = udSensitive - udTolerant
# Get masked difference --------------------------------------------------
# projection(rastDiff) <- CRS("+init=EPSG:27700") # sets projection to British National Grid
maskedDiff = mask(rastDiff, uk_map)
op = par(font.lab = 2,mar=c(2,9,1,9)+0.1,xpd=FALSE, family = "lil")
fun_colour_range <- colorRampPalette(c("#c6787e","#d8dedd","#79c6c0"))
my_colours <- fun_colour_range(1000)
plot(st_geometry(uk_map),border="#f9fdf9",axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5),
col="#d8dedd",cex.axis=0.8)
plot(maskedDiff,col=my_colours, add = TRUE)
plot(st_geometry(uk_map),border="#f9fdf9",add = TRUE)
title(main = "Difference in lichen indicator spp. occurrence",family = "lil",cex.main = 1.1,line = -1)
# Preparing data ----------------------------------------------------------
sdf = data.frame(df2$indicatorType,as.numeric(df2$decimalLongitude),
as.numeric(df2$decimalLatitude))
s = SpatialPointsDataFrame(data = na.omit(sdf),coords = sdf[,2:3],proj4string = CRS("EPSG:4326"))
# # Trying to set up boundary
# uk_mapL = uk_map
# coast = ne_coastline()
# coast <-coast[[1,"geometry"]]
# as(st_geometry(coast), "Spatial")
# (ud <- kernelUD(s[,1], same4all = TRUE, grid = 100, boundary = st_geometry(coast)))
# Calculating kernel density ----------------------------------------------
(ud <- kernelUD(s[,1], same4all = TRUE, grid = 1000))
# Calculating difference --------------------------------------------------
udSensitive = raster(ud$nSensitive)
udTolerant = raster(ud$nTolerant)
compareRaster(udSensitive,udTolerant)
rastDiff = udSensitive - udTolerant
# Get masked difference --------------------------------------------------
# projection(rastDiff) <- CRS("+init=EPSG:27700") # sets projection to British National Grid
maskedDiff = mask(rastDiff, uk_map)
# Plot difference --------------------------------------------------
op = par(font.lab = 2,mar=c(2,9,1,9)+0.1,xpd=FALSE, family = "lil")
fun_colour_range <- colorRampPalette(c("#c6787e","#d8dedd","#79c6c0"))
my_colours <- fun_colour_range(1000)
plot(st_geometry(uk_map),border="#f9fdf9",axes=TRUE,
xlim=c(-15,5),ylim=c(48.5,61.5),
col="#d8dedd",cex.axis=0.8)
plot(maskedDiff,col=my_colours, add = TRUE)
plot(st_geometry(uk_map),border="#f9fdf9",add = TRUE)
title(main = "Difference in lichen indicator spp. occurrence",family = "lil",cex.main = 1.1,line = -1)
